// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TrainingPlan {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  level        Difficulty
  score        Float?     @default(0)
  totalRatings Int?       @default(0)
  description  String?
  startDate    DateTime
  endDate      DateTime?
  workouts     Workout[]  @relation("WorkoutInPlan")
  isDeleted    Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workout {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String?
  frequency          Int
  duration           Int
  score              Float?              @default(0)
  totalRatings       Int?                @default(0)
  level              Difficulty
  category           Category
  trainingType       String
  exercisesInWorkout ExerciseInWorkout[]
  trainingPlans      TrainingPlan[]      @relation("WorkoutInPlan")
  isDeleted          Boolean             @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExerciseInWorkout {
  id         Int      @id @default(autoincrement())
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  workout    Workout  @relation(fields: [workoutId], references: [id])
  workoutId  Int
  sets       Int
  reps       Int
  weight     Float?
  restTime   Int
  order      Int
  isDeleted  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workoutId, order])
}

model Exercise {
  id             Int                 @id @default(autoincrement())
  mediaUrl       String
  name           String
  score          Float?              @default(0)
  totalRatings   Int?                @default(0)
  level          Difficulty
  category       Category
  equipments     Equipment[]         @relation("EquipmentInExercise")
  description    String
  muscleGroups   MuscleGroup[]       @relation("ExerciseMuscleGroups")
  recommendation String?
  workouts       ExerciseInWorkout[]
  isDeleted      Boolean             @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuscleGroup {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  mediaUrl    String
  isDeleted   Boolean    @default(false)
  exercises   Exercise[] @relation("ExerciseMuscleGroups")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Equipment {
  id           Int               @id @default(autoincrement())
  name         String            @unique
  mediaUrl     String
  description  String?
  score        Float?            @default(0)
  totalRatings Int?              @default(0)
  category     EquipmentCategory
  exercise     Exercise[]        @relation("EquipmentInExercise")
  isDeleted    Boolean           @default(false)
  status       EquipmentStatus   @default(AVAILABLE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EquipmentCategory {
  MACHINE
  FREE_WEIGHT
  CARDIO
  ACCESSORY
  BODYWEIGHT
}

enum EquipmentStatus {
  AVAILABLE
  IN_MAINTENANCE
  OUT_OF_ORDER
}

enum Difficulty {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum Category {
  CARDIO
  STRENGTH
  FLEXIBILITY
}
